// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ttb_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ttb_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ttb_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ttb_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ttb_5fcontrol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ttb_5fcontrol_2eproto;
class TtbRe;
struct TtbReDefaultTypeInternal;
extern TtbReDefaultTypeInternal _TtbRe_default_instance_;
class TtbSet;
struct TtbSetDefaultTypeInternal;
extern TtbSetDefaultTypeInternal _TtbSet_default_instance_;
class TtbSetPos;
struct TtbSetPosDefaultTypeInternal;
extern TtbSetPosDefaultTypeInternal _TtbSetPos_default_instance_;
class TtbSetVel;
struct TtbSetVelDefaultTypeInternal;
extern TtbSetVelDefaultTypeInternal _TtbSetVel_default_instance_;
class TtbState;
struct TtbStateDefaultTypeInternal;
extern TtbStateDefaultTypeInternal _TtbState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TtbRe* Arena::CreateMaybeMessage<::TtbRe>(Arena*);
template<> ::TtbSet* Arena::CreateMaybeMessage<::TtbSet>(Arena*);
template<> ::TtbSetPos* Arena::CreateMaybeMessage<::TtbSetPos>(Arena*);
template<> ::TtbSetVel* Arena::CreateMaybeMessage<::TtbSetVel>(Arena*);
template<> ::TtbState* Arena::CreateMaybeMessage<::TtbState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TtbOperation : int {
  TTB_NO_CMD = 0,
  TTB_MODE = 1,
  TTB_SET_VEL = 2,
  TTB_SET_POS_X = 4,
  TTB_SET_POS_Y = 5,
  TTB_REOOT = 6,
  TtbOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TtbOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TtbOperation_IsValid(int value);
constexpr TtbOperation TtbOperation_MIN = TTB_NO_CMD;
constexpr TtbOperation TtbOperation_MAX = TTB_REOOT;
constexpr int TtbOperation_ARRAYSIZE = TtbOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TtbOperation_descriptor();
template<typename T>
inline const std::string& TtbOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TtbOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TtbOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TtbOperation_descriptor(), enum_t_value);
}
inline bool TtbOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TtbOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TtbOperation>(
    TtbOperation_descriptor(), name, value);
}
enum TtbMode : int {
  TTB_DISABLE = 0,
  TTB_EN_STOP = 16,
  TTB_VEL = 32,
  TTB_POS = 48,
  TtbMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TtbMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TtbMode_IsValid(int value);
constexpr TtbMode TtbMode_MIN = TTB_DISABLE;
constexpr TtbMode TtbMode_MAX = TTB_POS;
constexpr int TtbMode_ARRAYSIZE = TtbMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TtbMode_descriptor();
template<typename T>
inline const std::string& TtbMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TtbMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TtbMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TtbMode_descriptor(), enum_t_value);
}
inline bool TtbMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TtbMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TtbMode>(
    TtbMode_descriptor(), name, value);
}
// ===================================================================

class TtbSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TtbSet) */ {
 public:
  inline TtbSet() : TtbSet(nullptr) {}
  ~TtbSet() override;
  explicit PROTOBUF_CONSTEXPR TtbSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TtbSet(const TtbSet& from);
  TtbSet(TtbSet&& from) noexcept
    : TtbSet() {
    *this = ::std::move(from);
  }

  inline TtbSet& operator=(const TtbSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TtbSet& operator=(TtbSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TtbSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TtbSet* internal_default_instance() {
    return reinterpret_cast<const TtbSet*>(
               &_TtbSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TtbSet& a, TtbSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TtbSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TtbSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TtbSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TtbSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TtbSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TtbSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TtbSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TtbSet";
  }
  protected:
  explicit TtbSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetVelFieldNumber = 3,
    kSetPosXFieldNumber = 5,
    kSetPosYFieldNumber = 6,
    kOperationFieldNumber = 1,
    kSetModeFieldNumber = 2,
    kHbFieldNumber = 7,
  };
  // .TtbSetVel set_vel = 3;
  bool has_set_vel() const;
  private:
  bool _internal_has_set_vel() const;
  public:
  void clear_set_vel();
  const ::TtbSetVel& set_vel() const;
  PROTOBUF_NODISCARD ::TtbSetVel* release_set_vel();
  ::TtbSetVel* mutable_set_vel();
  void set_allocated_set_vel(::TtbSetVel* set_vel);
  private:
  const ::TtbSetVel& _internal_set_vel() const;
  ::TtbSetVel* _internal_mutable_set_vel();
  public:
  void unsafe_arena_set_allocated_set_vel(
      ::TtbSetVel* set_vel);
  ::TtbSetVel* unsafe_arena_release_set_vel();

  // .TtbSetPos set_pos_x = 5;
  bool has_set_pos_x() const;
  private:
  bool _internal_has_set_pos_x() const;
  public:
  void clear_set_pos_x();
  const ::TtbSetPos& set_pos_x() const;
  PROTOBUF_NODISCARD ::TtbSetPos* release_set_pos_x();
  ::TtbSetPos* mutable_set_pos_x();
  void set_allocated_set_pos_x(::TtbSetPos* set_pos_x);
  private:
  const ::TtbSetPos& _internal_set_pos_x() const;
  ::TtbSetPos* _internal_mutable_set_pos_x();
  public:
  void unsafe_arena_set_allocated_set_pos_x(
      ::TtbSetPos* set_pos_x);
  ::TtbSetPos* unsafe_arena_release_set_pos_x();

  // .TtbSetPos set_pos_y = 6;
  bool has_set_pos_y() const;
  private:
  bool _internal_has_set_pos_y() const;
  public:
  void clear_set_pos_y();
  const ::TtbSetPos& set_pos_y() const;
  PROTOBUF_NODISCARD ::TtbSetPos* release_set_pos_y();
  ::TtbSetPos* mutable_set_pos_y();
  void set_allocated_set_pos_y(::TtbSetPos* set_pos_y);
  private:
  const ::TtbSetPos& _internal_set_pos_y() const;
  ::TtbSetPos* _internal_mutable_set_pos_y();
  public:
  void unsafe_arena_set_allocated_set_pos_y(
      ::TtbSetPos* set_pos_y);
  ::TtbSetPos* unsafe_arena_release_set_pos_y();

  // .TtbOperation operation = 1;
  void clear_operation();
  ::TtbOperation operation() const;
  void set_operation(::TtbOperation value);
  private:
  ::TtbOperation _internal_operation() const;
  void _internal_set_operation(::TtbOperation value);
  public:

  // .TtbMode set_mode = 2;
  void clear_set_mode();
  ::TtbMode set_mode() const;
  void set_set_mode(::TtbMode value);
  private:
  ::TtbMode _internal_set_mode() const;
  void _internal_set_set_mode(::TtbMode value);
  public:

  // uint64 hb = 7;
  void clear_hb();
  uint64_t hb() const;
  void set_hb(uint64_t value);
  private:
  uint64_t _internal_hb() const;
  void _internal_set_hb(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TtbSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TtbSetVel* set_vel_;
  ::TtbSetPos* set_pos_x_;
  ::TtbSetPos* set_pos_y_;
  int operation_;
  int set_mode_;
  uint64_t hb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ttb_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class TtbSetVel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TtbSetVel) */ {
 public:
  inline TtbSetVel() : TtbSetVel(nullptr) {}
  ~TtbSetVel() override;
  explicit PROTOBUF_CONSTEXPR TtbSetVel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TtbSetVel(const TtbSetVel& from);
  TtbSetVel(TtbSetVel&& from) noexcept
    : TtbSetVel() {
    *this = ::std::move(from);
  }

  inline TtbSetVel& operator=(const TtbSetVel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TtbSetVel& operator=(TtbSetVel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TtbSetVel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TtbSetVel* internal_default_instance() {
    return reinterpret_cast<const TtbSetVel*>(
               &_TtbSetVel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TtbSetVel& a, TtbSetVel& b) {
    a.Swap(&b);
  }
  inline void Swap(TtbSetVel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TtbSetVel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TtbSetVel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TtbSetVel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TtbSetVel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TtbSetVel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TtbSetVel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TtbSetVel";
  }
  protected:
  explicit TtbSetVel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelXFieldNumber = 1,
    kVelYFieldNumber = 2,
  };
  // float vel_X = 1;
  void clear_vel_x();
  float vel_x() const;
  void set_vel_x(float value);
  private:
  float _internal_vel_x() const;
  void _internal_set_vel_x(float value);
  public:

  // float vel_y = 2;
  void clear_vel_y();
  float vel_y() const;
  void set_vel_y(float value);
  private:
  float _internal_vel_y() const;
  void _internal_set_vel_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:TtbSetVel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float vel_x_;
  float vel_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ttb_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class TtbSetPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TtbSetPos) */ {
 public:
  inline TtbSetPos() : TtbSetPos(nullptr) {}
  ~TtbSetPos() override;
  explicit PROTOBUF_CONSTEXPR TtbSetPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TtbSetPos(const TtbSetPos& from);
  TtbSetPos(TtbSetPos&& from) noexcept
    : TtbSetPos() {
    *this = ::std::move(from);
  }

  inline TtbSetPos& operator=(const TtbSetPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline TtbSetPos& operator=(TtbSetPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TtbSetPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const TtbSetPos* internal_default_instance() {
    return reinterpret_cast<const TtbSetPos*>(
               &_TtbSetPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TtbSetPos& a, TtbSetPos& b) {
    a.Swap(&b);
  }
  inline void Swap(TtbSetPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TtbSetPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TtbSetPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TtbSetPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TtbSetPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TtbSetPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TtbSetPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TtbSetPos";
  }
  protected:
  explicit TtbSetPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kPosMaxVelFieldNumber = 2,
  };
  // double pos = 1;
  void clear_pos();
  double pos() const;
  void set_pos(double value);
  private:
  double _internal_pos() const;
  void _internal_set_pos(double value);
  public:

  // float pos_max_vel = 2;
  void clear_pos_max_vel();
  float pos_max_vel() const;
  void set_pos_max_vel(float value);
  private:
  float _internal_pos_max_vel() const;
  void _internal_set_pos_max_vel(float value);
  public:

  // @@protoc_insertion_point(class_scope:TtbSetPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double pos_;
  float pos_max_vel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ttb_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class TtbRe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TtbRe) */ {
 public:
  inline TtbRe() : TtbRe(nullptr) {}
  ~TtbRe() override;
  explicit PROTOBUF_CONSTEXPR TtbRe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TtbRe(const TtbRe& from);
  TtbRe(TtbRe&& from) noexcept
    : TtbRe() {
    *this = ::std::move(from);
  }

  inline TtbRe& operator=(const TtbRe& from) {
    CopyFrom(from);
    return *this;
  }
  inline TtbRe& operator=(TtbRe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TtbRe& default_instance() {
    return *internal_default_instance();
  }
  static inline const TtbRe* internal_default_instance() {
    return reinterpret_cast<const TtbRe*>(
               &_TtbRe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TtbRe& a, TtbRe& b) {
    a.Swap(&b);
  }
  inline void Swap(TtbRe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TtbRe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TtbRe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TtbRe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TtbRe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TtbRe& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TtbRe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TtbRe";
  }
  protected:
  explicit TtbRe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 3,
    kRunCountFieldNumber = 1,
    kNowTtbModeFieldNumber = 2,
    kGetTtbVelXFieldNumber = 7,
    kGetTtbAngleXFieldNumber = 5,
    kGetTtbAngleYFieldNumber = 6,
    kGetTtbVelYFieldNumber = 8,
  };
  // .TtbState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::TtbState& state() const;
  PROTOBUF_NODISCARD ::TtbState* release_state();
  ::TtbState* mutable_state();
  void set_allocated_state(::TtbState* state);
  private:
  const ::TtbState& _internal_state() const;
  ::TtbState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::TtbState* state);
  ::TtbState* unsafe_arena_release_state();

  // uint64 run_count = 1;
  void clear_run_count();
  uint64_t run_count() const;
  void set_run_count(uint64_t value);
  private:
  uint64_t _internal_run_count() const;
  void _internal_set_run_count(uint64_t value);
  public:

  // .TtbMode now_ttb_mode = 2;
  void clear_now_ttb_mode();
  ::TtbMode now_ttb_mode() const;
  void set_now_ttb_mode(::TtbMode value);
  private:
  ::TtbMode _internal_now_ttb_mode() const;
  void _internal_set_now_ttb_mode(::TtbMode value);
  public:

  // float get_ttb_vel_x = 7;
  void clear_get_ttb_vel_x();
  float get_ttb_vel_x() const;
  void set_get_ttb_vel_x(float value);
  private:
  float _internal_get_ttb_vel_x() const;
  void _internal_set_get_ttb_vel_x(float value);
  public:

  // double get_ttb_angle_x = 5;
  void clear_get_ttb_angle_x();
  double get_ttb_angle_x() const;
  void set_get_ttb_angle_x(double value);
  private:
  double _internal_get_ttb_angle_x() const;
  void _internal_set_get_ttb_angle_x(double value);
  public:

  // double get_ttb_angle_y = 6;
  void clear_get_ttb_angle_y();
  double get_ttb_angle_y() const;
  void set_get_ttb_angle_y(double value);
  private:
  double _internal_get_ttb_angle_y() const;
  void _internal_set_get_ttb_angle_y(double value);
  public:

  // float get_ttb_vel_y = 8;
  void clear_get_ttb_vel_y();
  float get_ttb_vel_y() const;
  void set_get_ttb_vel_y(float value);
  private:
  float _internal_get_ttb_vel_y() const;
  void _internal_set_get_ttb_vel_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:TtbRe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TtbState* state_;
  uint64_t run_count_;
  int now_ttb_mode_;
  float get_ttb_vel_x_;
  double get_ttb_angle_x_;
  double get_ttb_angle_y_;
  float get_ttb_vel_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ttb_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class TtbState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TtbState) */ {
 public:
  inline TtbState() : TtbState(nullptr) {}
  ~TtbState() override;
  explicit PROTOBUF_CONSTEXPR TtbState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TtbState(const TtbState& from);
  TtbState(TtbState&& from) noexcept
    : TtbState() {
    *this = ::std::move(from);
  }

  inline TtbState& operator=(const TtbState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TtbState& operator=(TtbState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TtbState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TtbState* internal_default_instance() {
    return reinterpret_cast<const TtbState*>(
               &_TtbState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TtbState& a, TtbState& b) {
    a.Swap(&b);
  }
  inline void Swap(TtbState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TtbState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TtbState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TtbState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TtbState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TtbState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TtbState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TtbState";
  }
  protected:
  explicit TtbState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 100,
    kDrvStateXFieldNumber = 6,
    kDrvStateYFieldNumber = 7,
    kDrvErrXFieldNumber = 8,
    kDrvErrYFieldNumber = 9,
    kRotaryStateFieldNumber = 10,
    kErrCodeFieldNumber = 27,
  };
  // string versions = 100;
  void clear_versions();
  const std::string& versions() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_versions(ArgT0&& arg0, ArgT... args);
  std::string* mutable_versions();
  PROTOBUF_NODISCARD std::string* release_versions();
  void set_allocated_versions(std::string* versions);
  private:
  const std::string& _internal_versions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_versions(const std::string& value);
  std::string* _internal_mutable_versions();
  public:

  // uint32 drv_state_x = 6;
  void clear_drv_state_x();
  uint32_t drv_state_x() const;
  void set_drv_state_x(uint32_t value);
  private:
  uint32_t _internal_drv_state_x() const;
  void _internal_set_drv_state_x(uint32_t value);
  public:

  // uint32 drv_state_y = 7;
  void clear_drv_state_y();
  uint32_t drv_state_y() const;
  void set_drv_state_y(uint32_t value);
  private:
  uint32_t _internal_drv_state_y() const;
  void _internal_set_drv_state_y(uint32_t value);
  public:

  // uint32 drv_err_x = 8;
  void clear_drv_err_x();
  uint32_t drv_err_x() const;
  void set_drv_err_x(uint32_t value);
  private:
  uint32_t _internal_drv_err_x() const;
  void _internal_set_drv_err_x(uint32_t value);
  public:

  // uint32 drv_err_y = 9;
  void clear_drv_err_y();
  uint32_t drv_err_y() const;
  void set_drv_err_y(uint32_t value);
  private:
  uint32_t _internal_drv_err_y() const;
  void _internal_set_drv_err_y(uint32_t value);
  public:

  // uint32 rotary_state = 10;
  void clear_rotary_state();
  uint32_t rotary_state() const;
  void set_rotary_state(uint32_t value);
  private:
  uint32_t _internal_rotary_state() const;
  void _internal_set_rotary_state(uint32_t value);
  public:

  // uint32 err_code = 27;
  void clear_err_code();
  uint32_t err_code() const;
  void set_err_code(uint32_t value);
  private:
  uint32_t _internal_err_code() const;
  void _internal_set_err_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TtbState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versions_;
  uint32_t drv_state_x_;
  uint32_t drv_state_y_;
  uint32_t drv_err_x_;
  uint32_t drv_err_y_;
  uint32_t rotary_state_;
  uint32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ttb_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TtbSet

// .TtbOperation operation = 1;
inline void TtbSet::clear_operation() {
  operation_ = 0;
}
inline ::TtbOperation TtbSet::_internal_operation() const {
  return static_cast< ::TtbOperation >(operation_);
}
inline ::TtbOperation TtbSet::operation() const {
  // @@protoc_insertion_point(field_get:TtbSet.operation)
  return _internal_operation();
}
inline void TtbSet::_internal_set_operation(::TtbOperation value) {
  
  operation_ = value;
}
inline void TtbSet::set_operation(::TtbOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:TtbSet.operation)
}

// .TtbMode set_mode = 2;
inline void TtbSet::clear_set_mode() {
  set_mode_ = 0;
}
inline ::TtbMode TtbSet::_internal_set_mode() const {
  return static_cast< ::TtbMode >(set_mode_);
}
inline ::TtbMode TtbSet::set_mode() const {
  // @@protoc_insertion_point(field_get:TtbSet.set_mode)
  return _internal_set_mode();
}
inline void TtbSet::_internal_set_set_mode(::TtbMode value) {
  
  set_mode_ = value;
}
inline void TtbSet::set_set_mode(::TtbMode value) {
  _internal_set_set_mode(value);
  // @@protoc_insertion_point(field_set:TtbSet.set_mode)
}

// .TtbSetVel set_vel = 3;
inline bool TtbSet::_internal_has_set_vel() const {
  return this != internal_default_instance() && set_vel_ != nullptr;
}
inline bool TtbSet::has_set_vel() const {
  return _internal_has_set_vel();
}
inline void TtbSet::clear_set_vel() {
  if (GetArenaForAllocation() == nullptr && set_vel_ != nullptr) {
    delete set_vel_;
  }
  set_vel_ = nullptr;
}
inline const ::TtbSetVel& TtbSet::_internal_set_vel() const {
  const ::TtbSetVel* p = set_vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::TtbSetVel&>(
      ::_TtbSetVel_default_instance_);
}
inline const ::TtbSetVel& TtbSet::set_vel() const {
  // @@protoc_insertion_point(field_get:TtbSet.set_vel)
  return _internal_set_vel();
}
inline void TtbSet::unsafe_arena_set_allocated_set_vel(
    ::TtbSetVel* set_vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_vel_);
  }
  set_vel_ = set_vel;
  if (set_vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TtbSet.set_vel)
}
inline ::TtbSetVel* TtbSet::release_set_vel() {
  
  ::TtbSetVel* temp = set_vel_;
  set_vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TtbSetVel* TtbSet::unsafe_arena_release_set_vel() {
  // @@protoc_insertion_point(field_release:TtbSet.set_vel)
  
  ::TtbSetVel* temp = set_vel_;
  set_vel_ = nullptr;
  return temp;
}
inline ::TtbSetVel* TtbSet::_internal_mutable_set_vel() {
  
  if (set_vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TtbSetVel>(GetArenaForAllocation());
    set_vel_ = p;
  }
  return set_vel_;
}
inline ::TtbSetVel* TtbSet::mutable_set_vel() {
  ::TtbSetVel* _msg = _internal_mutable_set_vel();
  // @@protoc_insertion_point(field_mutable:TtbSet.set_vel)
  return _msg;
}
inline void TtbSet::set_allocated_set_vel(::TtbSetVel* set_vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_vel_;
  }
  if (set_vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_vel);
    if (message_arena != submessage_arena) {
      set_vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_vel, submessage_arena);
    }
    
  } else {
    
  }
  set_vel_ = set_vel;
  // @@protoc_insertion_point(field_set_allocated:TtbSet.set_vel)
}

// .TtbSetPos set_pos_x = 5;
inline bool TtbSet::_internal_has_set_pos_x() const {
  return this != internal_default_instance() && set_pos_x_ != nullptr;
}
inline bool TtbSet::has_set_pos_x() const {
  return _internal_has_set_pos_x();
}
inline void TtbSet::clear_set_pos_x() {
  if (GetArenaForAllocation() == nullptr && set_pos_x_ != nullptr) {
    delete set_pos_x_;
  }
  set_pos_x_ = nullptr;
}
inline const ::TtbSetPos& TtbSet::_internal_set_pos_x() const {
  const ::TtbSetPos* p = set_pos_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::TtbSetPos&>(
      ::_TtbSetPos_default_instance_);
}
inline const ::TtbSetPos& TtbSet::set_pos_x() const {
  // @@protoc_insertion_point(field_get:TtbSet.set_pos_x)
  return _internal_set_pos_x();
}
inline void TtbSet::unsafe_arena_set_allocated_set_pos_x(
    ::TtbSetPos* set_pos_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_pos_x_);
  }
  set_pos_x_ = set_pos_x;
  if (set_pos_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TtbSet.set_pos_x)
}
inline ::TtbSetPos* TtbSet::release_set_pos_x() {
  
  ::TtbSetPos* temp = set_pos_x_;
  set_pos_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TtbSetPos* TtbSet::unsafe_arena_release_set_pos_x() {
  // @@protoc_insertion_point(field_release:TtbSet.set_pos_x)
  
  ::TtbSetPos* temp = set_pos_x_;
  set_pos_x_ = nullptr;
  return temp;
}
inline ::TtbSetPos* TtbSet::_internal_mutable_set_pos_x() {
  
  if (set_pos_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::TtbSetPos>(GetArenaForAllocation());
    set_pos_x_ = p;
  }
  return set_pos_x_;
}
inline ::TtbSetPos* TtbSet::mutable_set_pos_x() {
  ::TtbSetPos* _msg = _internal_mutable_set_pos_x();
  // @@protoc_insertion_point(field_mutable:TtbSet.set_pos_x)
  return _msg;
}
inline void TtbSet::set_allocated_set_pos_x(::TtbSetPos* set_pos_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_pos_x_;
  }
  if (set_pos_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_pos_x);
    if (message_arena != submessage_arena) {
      set_pos_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_pos_x, submessage_arena);
    }
    
  } else {
    
  }
  set_pos_x_ = set_pos_x;
  // @@protoc_insertion_point(field_set_allocated:TtbSet.set_pos_x)
}

// .TtbSetPos set_pos_y = 6;
inline bool TtbSet::_internal_has_set_pos_y() const {
  return this != internal_default_instance() && set_pos_y_ != nullptr;
}
inline bool TtbSet::has_set_pos_y() const {
  return _internal_has_set_pos_y();
}
inline void TtbSet::clear_set_pos_y() {
  if (GetArenaForAllocation() == nullptr && set_pos_y_ != nullptr) {
    delete set_pos_y_;
  }
  set_pos_y_ = nullptr;
}
inline const ::TtbSetPos& TtbSet::_internal_set_pos_y() const {
  const ::TtbSetPos* p = set_pos_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::TtbSetPos&>(
      ::_TtbSetPos_default_instance_);
}
inline const ::TtbSetPos& TtbSet::set_pos_y() const {
  // @@protoc_insertion_point(field_get:TtbSet.set_pos_y)
  return _internal_set_pos_y();
}
inline void TtbSet::unsafe_arena_set_allocated_set_pos_y(
    ::TtbSetPos* set_pos_y) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_pos_y_);
  }
  set_pos_y_ = set_pos_y;
  if (set_pos_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TtbSet.set_pos_y)
}
inline ::TtbSetPos* TtbSet::release_set_pos_y() {
  
  ::TtbSetPos* temp = set_pos_y_;
  set_pos_y_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TtbSetPos* TtbSet::unsafe_arena_release_set_pos_y() {
  // @@protoc_insertion_point(field_release:TtbSet.set_pos_y)
  
  ::TtbSetPos* temp = set_pos_y_;
  set_pos_y_ = nullptr;
  return temp;
}
inline ::TtbSetPos* TtbSet::_internal_mutable_set_pos_y() {
  
  if (set_pos_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::TtbSetPos>(GetArenaForAllocation());
    set_pos_y_ = p;
  }
  return set_pos_y_;
}
inline ::TtbSetPos* TtbSet::mutable_set_pos_y() {
  ::TtbSetPos* _msg = _internal_mutable_set_pos_y();
  // @@protoc_insertion_point(field_mutable:TtbSet.set_pos_y)
  return _msg;
}
inline void TtbSet::set_allocated_set_pos_y(::TtbSetPos* set_pos_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete set_pos_y_;
  }
  if (set_pos_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_pos_y);
    if (message_arena != submessage_arena) {
      set_pos_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_pos_y, submessage_arena);
    }
    
  } else {
    
  }
  set_pos_y_ = set_pos_y;
  // @@protoc_insertion_point(field_set_allocated:TtbSet.set_pos_y)
}

// uint64 hb = 7;
inline void TtbSet::clear_hb() {
  hb_ = uint64_t{0u};
}
inline uint64_t TtbSet::_internal_hb() const {
  return hb_;
}
inline uint64_t TtbSet::hb() const {
  // @@protoc_insertion_point(field_get:TtbSet.hb)
  return _internal_hb();
}
inline void TtbSet::_internal_set_hb(uint64_t value) {
  
  hb_ = value;
}
inline void TtbSet::set_hb(uint64_t value) {
  _internal_set_hb(value);
  // @@protoc_insertion_point(field_set:TtbSet.hb)
}

// -------------------------------------------------------------------

// TtbSetVel

// float vel_X = 1;
inline void TtbSetVel::clear_vel_x() {
  vel_x_ = 0;
}
inline float TtbSetVel::_internal_vel_x() const {
  return vel_x_;
}
inline float TtbSetVel::vel_x() const {
  // @@protoc_insertion_point(field_get:TtbSetVel.vel_X)
  return _internal_vel_x();
}
inline void TtbSetVel::_internal_set_vel_x(float value) {
  
  vel_x_ = value;
}
inline void TtbSetVel::set_vel_x(float value) {
  _internal_set_vel_x(value);
  // @@protoc_insertion_point(field_set:TtbSetVel.vel_X)
}

// float vel_y = 2;
inline void TtbSetVel::clear_vel_y() {
  vel_y_ = 0;
}
inline float TtbSetVel::_internal_vel_y() const {
  return vel_y_;
}
inline float TtbSetVel::vel_y() const {
  // @@protoc_insertion_point(field_get:TtbSetVel.vel_y)
  return _internal_vel_y();
}
inline void TtbSetVel::_internal_set_vel_y(float value) {
  
  vel_y_ = value;
}
inline void TtbSetVel::set_vel_y(float value) {
  _internal_set_vel_y(value);
  // @@protoc_insertion_point(field_set:TtbSetVel.vel_y)
}

// -------------------------------------------------------------------

// TtbSetPos

// double pos = 1;
inline void TtbSetPos::clear_pos() {
  pos_ = 0;
}
inline double TtbSetPos::_internal_pos() const {
  return pos_;
}
inline double TtbSetPos::pos() const {
  // @@protoc_insertion_point(field_get:TtbSetPos.pos)
  return _internal_pos();
}
inline void TtbSetPos::_internal_set_pos(double value) {
  
  pos_ = value;
}
inline void TtbSetPos::set_pos(double value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:TtbSetPos.pos)
}

// float pos_max_vel = 2;
inline void TtbSetPos::clear_pos_max_vel() {
  pos_max_vel_ = 0;
}
inline float TtbSetPos::_internal_pos_max_vel() const {
  return pos_max_vel_;
}
inline float TtbSetPos::pos_max_vel() const {
  // @@protoc_insertion_point(field_get:TtbSetPos.pos_max_vel)
  return _internal_pos_max_vel();
}
inline void TtbSetPos::_internal_set_pos_max_vel(float value) {
  
  pos_max_vel_ = value;
}
inline void TtbSetPos::set_pos_max_vel(float value) {
  _internal_set_pos_max_vel(value);
  // @@protoc_insertion_point(field_set:TtbSetPos.pos_max_vel)
}

// -------------------------------------------------------------------

// TtbRe

// uint64 run_count = 1;
inline void TtbRe::clear_run_count() {
  run_count_ = uint64_t{0u};
}
inline uint64_t TtbRe::_internal_run_count() const {
  return run_count_;
}
inline uint64_t TtbRe::run_count() const {
  // @@protoc_insertion_point(field_get:TtbRe.run_count)
  return _internal_run_count();
}
inline void TtbRe::_internal_set_run_count(uint64_t value) {
  
  run_count_ = value;
}
inline void TtbRe::set_run_count(uint64_t value) {
  _internal_set_run_count(value);
  // @@protoc_insertion_point(field_set:TtbRe.run_count)
}

// .TtbMode now_ttb_mode = 2;
inline void TtbRe::clear_now_ttb_mode() {
  now_ttb_mode_ = 0;
}
inline ::TtbMode TtbRe::_internal_now_ttb_mode() const {
  return static_cast< ::TtbMode >(now_ttb_mode_);
}
inline ::TtbMode TtbRe::now_ttb_mode() const {
  // @@protoc_insertion_point(field_get:TtbRe.now_ttb_mode)
  return _internal_now_ttb_mode();
}
inline void TtbRe::_internal_set_now_ttb_mode(::TtbMode value) {
  
  now_ttb_mode_ = value;
}
inline void TtbRe::set_now_ttb_mode(::TtbMode value) {
  _internal_set_now_ttb_mode(value);
  // @@protoc_insertion_point(field_set:TtbRe.now_ttb_mode)
}

// .TtbState state = 3;
inline bool TtbRe::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool TtbRe::has_state() const {
  return _internal_has_state();
}
inline void TtbRe::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::TtbState& TtbRe::_internal_state() const {
  const ::TtbState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TtbState&>(
      ::_TtbState_default_instance_);
}
inline const ::TtbState& TtbRe::state() const {
  // @@protoc_insertion_point(field_get:TtbRe.state)
  return _internal_state();
}
inline void TtbRe::unsafe_arena_set_allocated_state(
    ::TtbState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TtbRe.state)
}
inline ::TtbState* TtbRe::release_state() {
  
  ::TtbState* temp = state_;
  state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TtbState* TtbRe::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:TtbRe.state)
  
  ::TtbState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::TtbState* TtbRe::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TtbState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::TtbState* TtbRe::mutable_state() {
  ::TtbState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:TtbRe.state)
  return _msg;
}
inline void TtbRe::set_allocated_state(::TtbState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:TtbRe.state)
}

// double get_ttb_angle_x = 5;
inline void TtbRe::clear_get_ttb_angle_x() {
  get_ttb_angle_x_ = 0;
}
inline double TtbRe::_internal_get_ttb_angle_x() const {
  return get_ttb_angle_x_;
}
inline double TtbRe::get_ttb_angle_x() const {
  // @@protoc_insertion_point(field_get:TtbRe.get_ttb_angle_x)
  return _internal_get_ttb_angle_x();
}
inline void TtbRe::_internal_set_get_ttb_angle_x(double value) {
  
  get_ttb_angle_x_ = value;
}
inline void TtbRe::set_get_ttb_angle_x(double value) {
  _internal_set_get_ttb_angle_x(value);
  // @@protoc_insertion_point(field_set:TtbRe.get_ttb_angle_x)
}

// double get_ttb_angle_y = 6;
inline void TtbRe::clear_get_ttb_angle_y() {
  get_ttb_angle_y_ = 0;
}
inline double TtbRe::_internal_get_ttb_angle_y() const {
  return get_ttb_angle_y_;
}
inline double TtbRe::get_ttb_angle_y() const {
  // @@protoc_insertion_point(field_get:TtbRe.get_ttb_angle_y)
  return _internal_get_ttb_angle_y();
}
inline void TtbRe::_internal_set_get_ttb_angle_y(double value) {
  
  get_ttb_angle_y_ = value;
}
inline void TtbRe::set_get_ttb_angle_y(double value) {
  _internal_set_get_ttb_angle_y(value);
  // @@protoc_insertion_point(field_set:TtbRe.get_ttb_angle_y)
}

// float get_ttb_vel_x = 7;
inline void TtbRe::clear_get_ttb_vel_x() {
  get_ttb_vel_x_ = 0;
}
inline float TtbRe::_internal_get_ttb_vel_x() const {
  return get_ttb_vel_x_;
}
inline float TtbRe::get_ttb_vel_x() const {
  // @@protoc_insertion_point(field_get:TtbRe.get_ttb_vel_x)
  return _internal_get_ttb_vel_x();
}
inline void TtbRe::_internal_set_get_ttb_vel_x(float value) {
  
  get_ttb_vel_x_ = value;
}
inline void TtbRe::set_get_ttb_vel_x(float value) {
  _internal_set_get_ttb_vel_x(value);
  // @@protoc_insertion_point(field_set:TtbRe.get_ttb_vel_x)
}

// float get_ttb_vel_y = 8;
inline void TtbRe::clear_get_ttb_vel_y() {
  get_ttb_vel_y_ = 0;
}
inline float TtbRe::_internal_get_ttb_vel_y() const {
  return get_ttb_vel_y_;
}
inline float TtbRe::get_ttb_vel_y() const {
  // @@protoc_insertion_point(field_get:TtbRe.get_ttb_vel_y)
  return _internal_get_ttb_vel_y();
}
inline void TtbRe::_internal_set_get_ttb_vel_y(float value) {
  
  get_ttb_vel_y_ = value;
}
inline void TtbRe::set_get_ttb_vel_y(float value) {
  _internal_set_get_ttb_vel_y(value);
  // @@protoc_insertion_point(field_set:TtbRe.get_ttb_vel_y)
}

// -------------------------------------------------------------------

// TtbState

// uint32 drv_state_x = 6;
inline void TtbState::clear_drv_state_x() {
  drv_state_x_ = 0u;
}
inline uint32_t TtbState::_internal_drv_state_x() const {
  return drv_state_x_;
}
inline uint32_t TtbState::drv_state_x() const {
  // @@protoc_insertion_point(field_get:TtbState.drv_state_x)
  return _internal_drv_state_x();
}
inline void TtbState::_internal_set_drv_state_x(uint32_t value) {
  
  drv_state_x_ = value;
}
inline void TtbState::set_drv_state_x(uint32_t value) {
  _internal_set_drv_state_x(value);
  // @@protoc_insertion_point(field_set:TtbState.drv_state_x)
}

// uint32 drv_state_y = 7;
inline void TtbState::clear_drv_state_y() {
  drv_state_y_ = 0u;
}
inline uint32_t TtbState::_internal_drv_state_y() const {
  return drv_state_y_;
}
inline uint32_t TtbState::drv_state_y() const {
  // @@protoc_insertion_point(field_get:TtbState.drv_state_y)
  return _internal_drv_state_y();
}
inline void TtbState::_internal_set_drv_state_y(uint32_t value) {
  
  drv_state_y_ = value;
}
inline void TtbState::set_drv_state_y(uint32_t value) {
  _internal_set_drv_state_y(value);
  // @@protoc_insertion_point(field_set:TtbState.drv_state_y)
}

// uint32 drv_err_x = 8;
inline void TtbState::clear_drv_err_x() {
  drv_err_x_ = 0u;
}
inline uint32_t TtbState::_internal_drv_err_x() const {
  return drv_err_x_;
}
inline uint32_t TtbState::drv_err_x() const {
  // @@protoc_insertion_point(field_get:TtbState.drv_err_x)
  return _internal_drv_err_x();
}
inline void TtbState::_internal_set_drv_err_x(uint32_t value) {
  
  drv_err_x_ = value;
}
inline void TtbState::set_drv_err_x(uint32_t value) {
  _internal_set_drv_err_x(value);
  // @@protoc_insertion_point(field_set:TtbState.drv_err_x)
}

// uint32 drv_err_y = 9;
inline void TtbState::clear_drv_err_y() {
  drv_err_y_ = 0u;
}
inline uint32_t TtbState::_internal_drv_err_y() const {
  return drv_err_y_;
}
inline uint32_t TtbState::drv_err_y() const {
  // @@protoc_insertion_point(field_get:TtbState.drv_err_y)
  return _internal_drv_err_y();
}
inline void TtbState::_internal_set_drv_err_y(uint32_t value) {
  
  drv_err_y_ = value;
}
inline void TtbState::set_drv_err_y(uint32_t value) {
  _internal_set_drv_err_y(value);
  // @@protoc_insertion_point(field_set:TtbState.drv_err_y)
}

// uint32 rotary_state = 10;
inline void TtbState::clear_rotary_state() {
  rotary_state_ = 0u;
}
inline uint32_t TtbState::_internal_rotary_state() const {
  return rotary_state_;
}
inline uint32_t TtbState::rotary_state() const {
  // @@protoc_insertion_point(field_get:TtbState.rotary_state)
  return _internal_rotary_state();
}
inline void TtbState::_internal_set_rotary_state(uint32_t value) {
  
  rotary_state_ = value;
}
inline void TtbState::set_rotary_state(uint32_t value) {
  _internal_set_rotary_state(value);
  // @@protoc_insertion_point(field_set:TtbState.rotary_state)
}

// uint32 err_code = 27;
inline void TtbState::clear_err_code() {
  err_code_ = 0u;
}
inline uint32_t TtbState::_internal_err_code() const {
  return err_code_;
}
inline uint32_t TtbState::err_code() const {
  // @@protoc_insertion_point(field_get:TtbState.err_code)
  return _internal_err_code();
}
inline void TtbState::_internal_set_err_code(uint32_t value) {
  
  err_code_ = value;
}
inline void TtbState::set_err_code(uint32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:TtbState.err_code)
}

// string versions = 100;
inline void TtbState::clear_versions() {
  versions_.ClearToEmpty();
}
inline const std::string& TtbState::versions() const {
  // @@protoc_insertion_point(field_get:TtbState.versions)
  return _internal_versions();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TtbState::set_versions(ArgT0&& arg0, ArgT... args) {
 
 versions_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TtbState.versions)
}
inline std::string* TtbState::mutable_versions() {
  std::string* _s = _internal_mutable_versions();
  // @@protoc_insertion_point(field_mutable:TtbState.versions)
  return _s;
}
inline const std::string& TtbState::_internal_versions() const {
  return versions_.Get();
}
inline void TtbState::_internal_set_versions(const std::string& value) {
  
  versions_.Set(value, GetArenaForAllocation());
}
inline std::string* TtbState::_internal_mutable_versions() {
  
  return versions_.Mutable(GetArenaForAllocation());
}
inline std::string* TtbState::release_versions() {
  // @@protoc_insertion_point(field_release:TtbState.versions)
  return versions_.Release();
}
inline void TtbState::set_allocated_versions(std::string* versions) {
  if (versions != nullptr) {
    
  } else {
    
  }
  versions_.SetAllocated(versions, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (versions_.IsDefault()) {
    versions_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TtbState.versions)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TtbOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TtbOperation>() {
  return ::TtbOperation_descriptor();
}
template <> struct is_proto_enum< ::TtbMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TtbMode>() {
  return ::TtbMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ttb_5fcontrol_2eproto
