// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ttb_control.proto

#include "ttb_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TtbSet::TtbSet(
    ::_pbi::ConstantInitialized)
  : set_vel_(nullptr)
  , set_pos_x_(nullptr)
  , set_pos_y_(nullptr)
  , operation_(0)

  , set_mode_(0)

  , hb_(uint64_t{0u}){}
struct TtbSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TtbSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TtbSetDefaultTypeInternal() {}
  union {
    TtbSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TtbSetDefaultTypeInternal _TtbSet_default_instance_;
PROTOBUF_CONSTEXPR TtbSetVel::TtbSetVel(
    ::_pbi::ConstantInitialized)
  : vel_x_(0)
  , vel_y_(0){}
struct TtbSetVelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TtbSetVelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TtbSetVelDefaultTypeInternal() {}
  union {
    TtbSetVel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TtbSetVelDefaultTypeInternal _TtbSetVel_default_instance_;
PROTOBUF_CONSTEXPR TtbSetPos::TtbSetPos(
    ::_pbi::ConstantInitialized)
  : pos_(0)
  , pos_max_vel_(0){}
struct TtbSetPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TtbSetPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TtbSetPosDefaultTypeInternal() {}
  union {
    TtbSetPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TtbSetPosDefaultTypeInternal _TtbSetPos_default_instance_;
PROTOBUF_CONSTEXPR TtbRe::TtbRe(
    ::_pbi::ConstantInitialized)
  : state_(nullptr)
  , run_count_(uint64_t{0u})
  , now_ttb_mode_(0)

  , get_ttb_vel_x_(0)
  , get_ttb_angle_x_(0)
  , get_ttb_angle_y_(0)
  , get_ttb_vel_y_(0){}
struct TtbReDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TtbReDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TtbReDefaultTypeInternal() {}
  union {
    TtbRe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TtbReDefaultTypeInternal _TtbRe_default_instance_;
PROTOBUF_CONSTEXPR TtbState::TtbState(
    ::_pbi::ConstantInitialized)
  : versions_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , drv_state_x_(0u)
  , drv_state_y_(0u)
  , drv_err_x_(0u)
  , drv_err_y_(0u)
  , rotary_state_(0u)
  , err_code_(0u){}
struct TtbStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TtbStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TtbStateDefaultTypeInternal() {}
  union {
    TtbState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TtbStateDefaultTypeInternal _TtbState_default_instance_;
static ::_pb::Metadata file_level_metadata_ttb_5fcontrol_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ttb_5fcontrol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ttb_5fcontrol_2eproto = nullptr;

const uint32_t TableStruct_ttb_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TtbSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TtbSet, operation_),
  PROTOBUF_FIELD_OFFSET(::TtbSet, set_mode_),
  PROTOBUF_FIELD_OFFSET(::TtbSet, set_vel_),
  PROTOBUF_FIELD_OFFSET(::TtbSet, set_pos_x_),
  PROTOBUF_FIELD_OFFSET(::TtbSet, set_pos_y_),
  PROTOBUF_FIELD_OFFSET(::TtbSet, hb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TtbSetVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TtbSetVel, vel_x_),
  PROTOBUF_FIELD_OFFSET(::TtbSetVel, vel_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TtbSetPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TtbSetPos, pos_),
  PROTOBUF_FIELD_OFFSET(::TtbSetPos, pos_max_vel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TtbRe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TtbRe, run_count_),
  PROTOBUF_FIELD_OFFSET(::TtbRe, now_ttb_mode_),
  PROTOBUF_FIELD_OFFSET(::TtbRe, state_),
  PROTOBUF_FIELD_OFFSET(::TtbRe, get_ttb_angle_x_),
  PROTOBUF_FIELD_OFFSET(::TtbRe, get_ttb_angle_y_),
  PROTOBUF_FIELD_OFFSET(::TtbRe, get_ttb_vel_x_),
  PROTOBUF_FIELD_OFFSET(::TtbRe, get_ttb_vel_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TtbState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TtbState, drv_state_x_),
  PROTOBUF_FIELD_OFFSET(::TtbState, drv_state_y_),
  PROTOBUF_FIELD_OFFSET(::TtbState, drv_err_x_),
  PROTOBUF_FIELD_OFFSET(::TtbState, drv_err_y_),
  PROTOBUF_FIELD_OFFSET(::TtbState, rotary_state_),
  PROTOBUF_FIELD_OFFSET(::TtbState, err_code_),
  PROTOBUF_FIELD_OFFSET(::TtbState, versions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TtbSet)},
  { 12, -1, -1, sizeof(::TtbSetVel)},
  { 20, -1, -1, sizeof(::TtbSetPos)},
  { 28, -1, -1, sizeof(::TtbRe)},
  { 41, -1, -1, sizeof(::TtbState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TtbSet_default_instance_._instance,
  &::_TtbSetVel_default_instance_._instance,
  &::_TtbSetPos_default_instance_._instance,
  &::_TtbRe_default_instance_._instance,
  &::_TtbState_default_instance_._instance,
};

const char descriptor_table_protodef_ttb_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ttb_control.proto\"\255\001\n\006TtbSet\022 \n\toperat"
  "ion\030\001 \001(\0162\r.TtbOperation\022\032\n\010set_mode\030\002 \001"
  "(\0162\010.TtbMode\022\033\n\007set_vel\030\003 \001(\0132\n.TtbSetVe"
  "l\022\035\n\tset_pos_x\030\005 \001(\0132\n.TtbSetPos\022\035\n\tset_"
  "pos_y\030\006 \001(\0132\n.TtbSetPos\022\n\n\002hb\030\007 \001(\004\")\n\tT"
  "tbSetVel\022\r\n\005vel_X\030\001 \001(\002\022\r\n\005vel_y\030\002 \001(\002\"-"
  "\n\tTtbSetPos\022\013\n\003pos\030\001 \001(\001\022\023\n\013pos_max_vel\030"
  "\002 \001(\002\"\264\001\n\005TtbRe\022\021\n\trun_count\030\001 \001(\004\022\036\n\014no"
  "w_ttb_mode\030\002 \001(\0162\010.TtbMode\022\030\n\005state\030\003 \001("
  "\0132\t.TtbState\022\027\n\017get_ttb_angle_x\030\005 \001(\001\022\027\n"
  "\017get_ttb_angle_y\030\006 \001(\001\022\025\n\rget_ttb_vel_x\030"
  "\007 \001(\002\022\025\n\rget_ttb_vel_y\030\010 \001(\002\"\224\001\n\010TtbStat"
  "e\022\023\n\013drv_state_x\030\006 \001(\r\022\023\n\013drv_state_y\030\007 "
  "\001(\r\022\021\n\tdrv_err_x\030\010 \001(\r\022\021\n\tdrv_err_y\030\t \001("
  "\r\022\024\n\014rotary_state\030\n \001(\r\022\020\n\010err_code\030\033 \001("
  "\r\022\020\n\010versions\030d \001(\t*r\n\014TtbOperation\022\016\n\nT"
  "TB_NO_CMD\020\000\022\014\n\010TTB_MODE\020\001\022\017\n\013TTB_SET_VEL"
  "\020\002\022\021\n\rTTB_SET_POS_X\020\004\022\021\n\rTTB_SET_POS_Y\020\005"
  "\022\r\n\tTTB_REOOT\020\006*E\n\007TtbMode\022\017\n\013TTB_DISABL"
  "E\020\000\022\017\n\013TTB_EN_STOP\020\020\022\013\n\007TTB_VEL\020 \022\013\n\007TTB"
  "_POS\0200b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ttb_5fcontrol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ttb_5fcontrol_2eproto = {
    false, false, 814, descriptor_table_protodef_ttb_5fcontrol_2eproto,
    "ttb_control.proto",
    &descriptor_table_ttb_5fcontrol_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_ttb_5fcontrol_2eproto::offsets,
    file_level_metadata_ttb_5fcontrol_2eproto, file_level_enum_descriptors_ttb_5fcontrol_2eproto,
    file_level_service_descriptors_ttb_5fcontrol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ttb_5fcontrol_2eproto_getter() {
  return &descriptor_table_ttb_5fcontrol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ttb_5fcontrol_2eproto(&descriptor_table_ttb_5fcontrol_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TtbOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ttb_5fcontrol_2eproto);
  return file_level_enum_descriptors_ttb_5fcontrol_2eproto[0];
}
bool TtbOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TtbMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ttb_5fcontrol_2eproto);
  return file_level_enum_descriptors_ttb_5fcontrol_2eproto[1];
}
bool TtbMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 16:
    case 32:
    case 48:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TtbSet::_Internal {
 public:
  static const ::TtbSetVel& set_vel(const TtbSet* msg);
  static const ::TtbSetPos& set_pos_x(const TtbSet* msg);
  static const ::TtbSetPos& set_pos_y(const TtbSet* msg);
};

const ::TtbSetVel&
TtbSet::_Internal::set_vel(const TtbSet* msg) {
  return *msg->set_vel_;
}
const ::TtbSetPos&
TtbSet::_Internal::set_pos_x(const TtbSet* msg) {
  return *msg->set_pos_x_;
}
const ::TtbSetPos&
TtbSet::_Internal::set_pos_y(const TtbSet* msg) {
  return *msg->set_pos_y_;
}
TtbSet::TtbSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TtbSet)
}
TtbSet::TtbSet(const TtbSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_set_vel()) {
    set_vel_ = new ::TtbSetVel(*from.set_vel_);
  } else {
    set_vel_ = nullptr;
  }
  if (from._internal_has_set_pos_x()) {
    set_pos_x_ = new ::TtbSetPos(*from.set_pos_x_);
  } else {
    set_pos_x_ = nullptr;
  }
  if (from._internal_has_set_pos_y()) {
    set_pos_y_ = new ::TtbSetPos(*from.set_pos_y_);
  } else {
    set_pos_y_ = nullptr;
  }
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&hb_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(hb_));
  // @@protoc_insertion_point(copy_constructor:TtbSet)
}

inline void TtbSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&set_vel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hb_) -
    reinterpret_cast<char*>(&set_vel_)) + sizeof(hb_));
}

TtbSet::~TtbSet() {
  // @@protoc_insertion_point(destructor:TtbSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TtbSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete set_vel_;
  if (this != internal_default_instance()) delete set_pos_x_;
  if (this != internal_default_instance()) delete set_pos_y_;
}

void TtbSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TtbSet::Clear() {
// @@protoc_insertion_point(message_clear_start:TtbSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && set_vel_ != nullptr) {
    delete set_vel_;
  }
  set_vel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && set_pos_x_ != nullptr) {
    delete set_pos_x_;
  }
  set_pos_x_ = nullptr;
  if (GetArenaForAllocation() == nullptr && set_pos_y_ != nullptr) {
    delete set_pos_y_;
  }
  set_pos_y_ = nullptr;
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hb_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(hb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtbSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TtbOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::TtbOperation>(val));
        } else
          goto handle_unusual;
        continue;
      // .TtbMode set_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_set_mode(static_cast<::TtbMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .TtbSetVel set_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TtbSetPos set_pos_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_pos_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TtbSetPos set_pos_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_pos_y(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          hb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TtbSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TtbSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TtbOperation operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .TtbMode set_mode = 2;
  if (this->_internal_set_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_set_mode(), target);
  }

  // .TtbSetVel set_vel = 3;
  if (this->_internal_has_set_vel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::set_vel(this),
        _Internal::set_vel(this).GetCachedSize(), target, stream);
  }

  // .TtbSetPos set_pos_x = 5;
  if (this->_internal_has_set_pos_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::set_pos_x(this),
        _Internal::set_pos_x(this).GetCachedSize(), target, stream);
  }

  // .TtbSetPos set_pos_y = 6;
  if (this->_internal_has_set_pos_y()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::set_pos_y(this),
        _Internal::set_pos_y(this).GetCachedSize(), target, stream);
  }

  // uint64 hb = 7;
  if (this->_internal_hb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_hb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TtbSet)
  return target;
}

size_t TtbSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TtbSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TtbSetVel set_vel = 3;
  if (this->_internal_has_set_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_vel_);
  }

  // .TtbSetPos set_pos_x = 5;
  if (this->_internal_has_set_pos_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_pos_x_);
  }

  // .TtbSetPos set_pos_y = 6;
  if (this->_internal_has_set_pos_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_pos_y_);
  }

  // .TtbOperation operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // .TtbMode set_mode = 2;
  if (this->_internal_set_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_set_mode());
  }

  // uint64 hb = 7;
  if (this->_internal_hb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TtbSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TtbSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TtbSet::GetClassData() const { return &_class_data_; }

void TtbSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TtbSet *>(to)->MergeFrom(
      static_cast<const TtbSet &>(from));
}


void TtbSet::MergeFrom(const TtbSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TtbSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_set_vel()) {
    _internal_mutable_set_vel()->::TtbSetVel::MergeFrom(from._internal_set_vel());
  }
  if (from._internal_has_set_pos_x()) {
    _internal_mutable_set_pos_x()->::TtbSetPos::MergeFrom(from._internal_set_pos_x());
  }
  if (from._internal_has_set_pos_y()) {
    _internal_mutable_set_pos_y()->::TtbSetPos::MergeFrom(from._internal_set_pos_y());
  }
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from._internal_set_mode() != 0) {
    _internal_set_set_mode(from._internal_set_mode());
  }
  if (from._internal_hb() != 0) {
    _internal_set_hb(from._internal_hb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TtbSet::CopyFrom(const TtbSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TtbSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtbSet::IsInitialized() const {
  return true;
}

void TtbSet::InternalSwap(TtbSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtbSet, hb_)
      + sizeof(TtbSet::hb_)
      - PROTOBUF_FIELD_OFFSET(TtbSet, set_vel_)>(
          reinterpret_cast<char*>(&set_vel_),
          reinterpret_cast<char*>(&other->set_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtbSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ttb_5fcontrol_2eproto_getter, &descriptor_table_ttb_5fcontrol_2eproto_once,
      file_level_metadata_ttb_5fcontrol_2eproto[0]);
}

// ===================================================================

class TtbSetVel::_Internal {
 public:
};

TtbSetVel::TtbSetVel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TtbSetVel)
}
TtbSetVel::TtbSetVel(const TtbSetVel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vel_x_, &from.vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_y_) -
    reinterpret_cast<char*>(&vel_x_)) + sizeof(vel_y_));
  // @@protoc_insertion_point(copy_constructor:TtbSetVel)
}

inline void TtbSetVel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vel_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vel_y_) -
    reinterpret_cast<char*>(&vel_x_)) + sizeof(vel_y_));
}

TtbSetVel::~TtbSetVel() {
  // @@protoc_insertion_point(destructor:TtbSetVel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TtbSetVel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TtbSetVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TtbSetVel::Clear() {
// @@protoc_insertion_point(message_clear_start:TtbSetVel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_y_) -
      reinterpret_cast<char*>(&vel_x_)) + sizeof(vel_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtbSetVel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float vel_X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vel_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TtbSetVel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TtbSetVel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float vel_X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vel_x = this->_internal_vel_x();
  uint32_t raw_vel_x;
  memcpy(&raw_vel_x, &tmp_vel_x, sizeof(tmp_vel_x));
  if (raw_vel_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_vel_x(), target);
  }

  // float vel_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vel_y = this->_internal_vel_y();
  uint32_t raw_vel_y;
  memcpy(&raw_vel_y, &tmp_vel_y, sizeof(tmp_vel_y));
  if (raw_vel_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_vel_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TtbSetVel)
  return target;
}

size_t TtbSetVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TtbSetVel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float vel_X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vel_x = this->_internal_vel_x();
  uint32_t raw_vel_x;
  memcpy(&raw_vel_x, &tmp_vel_x, sizeof(tmp_vel_x));
  if (raw_vel_x != 0) {
    total_size += 1 + 4;
  }

  // float vel_y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vel_y = this->_internal_vel_y();
  uint32_t raw_vel_y;
  memcpy(&raw_vel_y, &tmp_vel_y, sizeof(tmp_vel_y));
  if (raw_vel_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TtbSetVel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TtbSetVel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TtbSetVel::GetClassData() const { return &_class_data_; }

void TtbSetVel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TtbSetVel *>(to)->MergeFrom(
      static_cast<const TtbSetVel &>(from));
}


void TtbSetVel::MergeFrom(const TtbSetVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TtbSetVel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vel_x = from._internal_vel_x();
  uint32_t raw_vel_x;
  memcpy(&raw_vel_x, &tmp_vel_x, sizeof(tmp_vel_x));
  if (raw_vel_x != 0) {
    _internal_set_vel_x(from._internal_vel_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vel_y = from._internal_vel_y();
  uint32_t raw_vel_y;
  memcpy(&raw_vel_y, &tmp_vel_y, sizeof(tmp_vel_y));
  if (raw_vel_y != 0) {
    _internal_set_vel_y(from._internal_vel_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TtbSetVel::CopyFrom(const TtbSetVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TtbSetVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtbSetVel::IsInitialized() const {
  return true;
}

void TtbSetVel::InternalSwap(TtbSetVel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtbSetVel, vel_y_)
      + sizeof(TtbSetVel::vel_y_)
      - PROTOBUF_FIELD_OFFSET(TtbSetVel, vel_x_)>(
          reinterpret_cast<char*>(&vel_x_),
          reinterpret_cast<char*>(&other->vel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtbSetVel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ttb_5fcontrol_2eproto_getter, &descriptor_table_ttb_5fcontrol_2eproto_once,
      file_level_metadata_ttb_5fcontrol_2eproto[1]);
}

// ===================================================================

class TtbSetPos::_Internal {
 public:
};

TtbSetPos::TtbSetPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TtbSetPos)
}
TtbSetPos::TtbSetPos(const TtbSetPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos_, &from.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_max_vel_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(pos_max_vel_));
  // @@protoc_insertion_point(copy_constructor:TtbSetPos)
}

inline void TtbSetPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_max_vel_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(pos_max_vel_));
}

TtbSetPos::~TtbSetPos() {
  // @@protoc_insertion_point(destructor:TtbSetPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TtbSetPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TtbSetPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TtbSetPos::Clear() {
// @@protoc_insertion_point(message_clear_start:TtbSetPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_max_vel_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(pos_max_vel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtbSetPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float pos_max_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          pos_max_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TtbSetPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TtbSetPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double pos = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos = this->_internal_pos();
  uint64_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pos(), target);
  }

  // float pos_max_vel = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_max_vel = this->_internal_pos_max_vel();
  uint32_t raw_pos_max_vel;
  memcpy(&raw_pos_max_vel, &tmp_pos_max_vel, sizeof(tmp_pos_max_vel));
  if (raw_pos_max_vel != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_max_vel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TtbSetPos)
  return target;
}

size_t TtbSetPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TtbSetPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pos = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos = this->_internal_pos();
  uint64_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    total_size += 1 + 8;
  }

  // float pos_max_vel = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_max_vel = this->_internal_pos_max_vel();
  uint32_t raw_pos_max_vel;
  memcpy(&raw_pos_max_vel, &tmp_pos_max_vel, sizeof(tmp_pos_max_vel));
  if (raw_pos_max_vel != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TtbSetPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TtbSetPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TtbSetPos::GetClassData() const { return &_class_data_; }

void TtbSetPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TtbSetPos *>(to)->MergeFrom(
      static_cast<const TtbSetPos &>(from));
}


void TtbSetPos::MergeFrom(const TtbSetPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TtbSetPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos = from._internal_pos();
  uint64_t raw_pos;
  memcpy(&raw_pos, &tmp_pos, sizeof(tmp_pos));
  if (raw_pos != 0) {
    _internal_set_pos(from._internal_pos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_max_vel = from._internal_pos_max_vel();
  uint32_t raw_pos_max_vel;
  memcpy(&raw_pos_max_vel, &tmp_pos_max_vel, sizeof(tmp_pos_max_vel));
  if (raw_pos_max_vel != 0) {
    _internal_set_pos_max_vel(from._internal_pos_max_vel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TtbSetPos::CopyFrom(const TtbSetPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TtbSetPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtbSetPos::IsInitialized() const {
  return true;
}

void TtbSetPos::InternalSwap(TtbSetPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtbSetPos, pos_max_vel_)
      + sizeof(TtbSetPos::pos_max_vel_)
      - PROTOBUF_FIELD_OFFSET(TtbSetPos, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtbSetPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ttb_5fcontrol_2eproto_getter, &descriptor_table_ttb_5fcontrol_2eproto_once,
      file_level_metadata_ttb_5fcontrol_2eproto[2]);
}

// ===================================================================

class TtbRe::_Internal {
 public:
  static const ::TtbState& state(const TtbRe* msg);
};

const ::TtbState&
TtbRe::_Internal::state(const TtbRe* msg) {
  return *msg->state_;
}
TtbRe::TtbRe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TtbRe)
}
TtbRe::TtbRe(const TtbRe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::TtbState(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&run_count_, &from.run_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_ttb_vel_y_) -
    reinterpret_cast<char*>(&run_count_)) + sizeof(get_ttb_vel_y_));
  // @@protoc_insertion_point(copy_constructor:TtbRe)
}

inline void TtbRe::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&get_ttb_vel_y_) -
    reinterpret_cast<char*>(&state_)) + sizeof(get_ttb_vel_y_));
}

TtbRe::~TtbRe() {
  // @@protoc_insertion_point(destructor:TtbRe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TtbRe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void TtbRe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TtbRe::Clear() {
// @@protoc_insertion_point(message_clear_start:TtbRe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&run_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_ttb_vel_y_) -
      reinterpret_cast<char*>(&run_count_)) + sizeof(get_ttb_vel_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtbRe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TtbMode now_ttb_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_now_ttb_mode(static_cast<::TtbMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .TtbState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double get_ttb_angle_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          get_ttb_angle_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double get_ttb_angle_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          get_ttb_angle_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float get_ttb_vel_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          get_ttb_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float get_ttb_vel_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          get_ttb_vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TtbRe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TtbRe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_count = 1;
  if (this->_internal_run_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_count(), target);
  }

  // .TtbMode now_ttb_mode = 2;
  if (this->_internal_now_ttb_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_now_ttb_mode(), target);
  }

  // .TtbState state = 3;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // double get_ttb_angle_x = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_get_ttb_angle_x = this->_internal_get_ttb_angle_x();
  uint64_t raw_get_ttb_angle_x;
  memcpy(&raw_get_ttb_angle_x, &tmp_get_ttb_angle_x, sizeof(tmp_get_ttb_angle_x));
  if (raw_get_ttb_angle_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_get_ttb_angle_x(), target);
  }

  // double get_ttb_angle_y = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_get_ttb_angle_y = this->_internal_get_ttb_angle_y();
  uint64_t raw_get_ttb_angle_y;
  memcpy(&raw_get_ttb_angle_y, &tmp_get_ttb_angle_y, sizeof(tmp_get_ttb_angle_y));
  if (raw_get_ttb_angle_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_get_ttb_angle_y(), target);
  }

  // float get_ttb_vel_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_ttb_vel_x = this->_internal_get_ttb_vel_x();
  uint32_t raw_get_ttb_vel_x;
  memcpy(&raw_get_ttb_vel_x, &tmp_get_ttb_vel_x, sizeof(tmp_get_ttb_vel_x));
  if (raw_get_ttb_vel_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_get_ttb_vel_x(), target);
  }

  // float get_ttb_vel_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_ttb_vel_y = this->_internal_get_ttb_vel_y();
  uint32_t raw_get_ttb_vel_y;
  memcpy(&raw_get_ttb_vel_y, &tmp_get_ttb_vel_y, sizeof(tmp_get_ttb_vel_y));
  if (raw_get_ttb_vel_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_get_ttb_vel_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TtbRe)
  return target;
}

size_t TtbRe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TtbRe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TtbState state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // uint64 run_count = 1;
  if (this->_internal_run_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_count());
  }

  // .TtbMode now_ttb_mode = 2;
  if (this->_internal_now_ttb_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_now_ttb_mode());
  }

  // float get_ttb_vel_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_ttb_vel_x = this->_internal_get_ttb_vel_x();
  uint32_t raw_get_ttb_vel_x;
  memcpy(&raw_get_ttb_vel_x, &tmp_get_ttb_vel_x, sizeof(tmp_get_ttb_vel_x));
  if (raw_get_ttb_vel_x != 0) {
    total_size += 1 + 4;
  }

  // double get_ttb_angle_x = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_get_ttb_angle_x = this->_internal_get_ttb_angle_x();
  uint64_t raw_get_ttb_angle_x;
  memcpy(&raw_get_ttb_angle_x, &tmp_get_ttb_angle_x, sizeof(tmp_get_ttb_angle_x));
  if (raw_get_ttb_angle_x != 0) {
    total_size += 1 + 8;
  }

  // double get_ttb_angle_y = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_get_ttb_angle_y = this->_internal_get_ttb_angle_y();
  uint64_t raw_get_ttb_angle_y;
  memcpy(&raw_get_ttb_angle_y, &tmp_get_ttb_angle_y, sizeof(tmp_get_ttb_angle_y));
  if (raw_get_ttb_angle_y != 0) {
    total_size += 1 + 8;
  }

  // float get_ttb_vel_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_ttb_vel_y = this->_internal_get_ttb_vel_y();
  uint32_t raw_get_ttb_vel_y;
  memcpy(&raw_get_ttb_vel_y, &tmp_get_ttb_vel_y, sizeof(tmp_get_ttb_vel_y));
  if (raw_get_ttb_vel_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TtbRe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TtbRe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TtbRe::GetClassData() const { return &_class_data_; }

void TtbRe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TtbRe *>(to)->MergeFrom(
      static_cast<const TtbRe &>(from));
}


void TtbRe::MergeFrom(const TtbRe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TtbRe)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::TtbState::MergeFrom(from._internal_state());
  }
  if (from._internal_run_count() != 0) {
    _internal_set_run_count(from._internal_run_count());
  }
  if (from._internal_now_ttb_mode() != 0) {
    _internal_set_now_ttb_mode(from._internal_now_ttb_mode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_ttb_vel_x = from._internal_get_ttb_vel_x();
  uint32_t raw_get_ttb_vel_x;
  memcpy(&raw_get_ttb_vel_x, &tmp_get_ttb_vel_x, sizeof(tmp_get_ttb_vel_x));
  if (raw_get_ttb_vel_x != 0) {
    _internal_set_get_ttb_vel_x(from._internal_get_ttb_vel_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_get_ttb_angle_x = from._internal_get_ttb_angle_x();
  uint64_t raw_get_ttb_angle_x;
  memcpy(&raw_get_ttb_angle_x, &tmp_get_ttb_angle_x, sizeof(tmp_get_ttb_angle_x));
  if (raw_get_ttb_angle_x != 0) {
    _internal_set_get_ttb_angle_x(from._internal_get_ttb_angle_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_get_ttb_angle_y = from._internal_get_ttb_angle_y();
  uint64_t raw_get_ttb_angle_y;
  memcpy(&raw_get_ttb_angle_y, &tmp_get_ttb_angle_y, sizeof(tmp_get_ttb_angle_y));
  if (raw_get_ttb_angle_y != 0) {
    _internal_set_get_ttb_angle_y(from._internal_get_ttb_angle_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_ttb_vel_y = from._internal_get_ttb_vel_y();
  uint32_t raw_get_ttb_vel_y;
  memcpy(&raw_get_ttb_vel_y, &tmp_get_ttb_vel_y, sizeof(tmp_get_ttb_vel_y));
  if (raw_get_ttb_vel_y != 0) {
    _internal_set_get_ttb_vel_y(from._internal_get_ttb_vel_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TtbRe::CopyFrom(const TtbRe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TtbRe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtbRe::IsInitialized() const {
  return true;
}

void TtbRe::InternalSwap(TtbRe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtbRe, get_ttb_vel_y_)
      + sizeof(TtbRe::get_ttb_vel_y_)
      - PROTOBUF_FIELD_OFFSET(TtbRe, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtbRe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ttb_5fcontrol_2eproto_getter, &descriptor_table_ttb_5fcontrol_2eproto_once,
      file_level_metadata_ttb_5fcontrol_2eproto[3]);
}

// ===================================================================

class TtbState::_Internal {
 public:
};

TtbState::TtbState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:TtbState)
}
TtbState::TtbState(const TtbState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  versions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    versions_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_versions().empty()) {
    versions_.Set(from._internal_versions(), 
      GetArenaForAllocation());
  }
  ::memcpy(&drv_state_x_, &from.drv_state_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&drv_state_x_)) + sizeof(err_code_));
  // @@protoc_insertion_point(copy_constructor:TtbState)
}

inline void TtbState::SharedCtor() {
versions_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  versions_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&drv_state_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&drv_state_x_)) + sizeof(err_code_));
}

TtbState::~TtbState() {
  // @@protoc_insertion_point(destructor:TtbState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TtbState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  versions_.Destroy();
}

void TtbState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TtbState::Clear() {
// @@protoc_insertion_point(message_clear_start:TtbState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.ClearToEmpty();
  ::memset(&drv_state_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_code_) -
      reinterpret_cast<char*>(&drv_state_x_)) + sizeof(err_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TtbState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 drv_state_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          drv_state_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drv_state_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          drv_state_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drv_err_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          drv_err_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 drv_err_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          drv_err_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotary_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          rotary_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 err_code = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string versions = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_versions();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TtbState.versions"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TtbState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TtbState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 drv_state_x = 6;
  if (this->_internal_drv_state_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_drv_state_x(), target);
  }

  // uint32 drv_state_y = 7;
  if (this->_internal_drv_state_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_drv_state_y(), target);
  }

  // uint32 drv_err_x = 8;
  if (this->_internal_drv_err_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_drv_err_x(), target);
  }

  // uint32 drv_err_y = 9;
  if (this->_internal_drv_err_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_drv_err_y(), target);
  }

  // uint32 rotary_state = 10;
  if (this->_internal_rotary_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rotary_state(), target);
  }

  // uint32 err_code = 27;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_err_code(), target);
  }

  // string versions = 100;
  if (!this->_internal_versions().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_versions().data(), static_cast<int>(this->_internal_versions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TtbState.versions");
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_versions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TtbState)
  return target;
}

size_t TtbState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TtbState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string versions = 100;
  if (!this->_internal_versions().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_versions());
  }

  // uint32 drv_state_x = 6;
  if (this->_internal_drv_state_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drv_state_x());
  }

  // uint32 drv_state_y = 7;
  if (this->_internal_drv_state_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drv_state_y());
  }

  // uint32 drv_err_x = 8;
  if (this->_internal_drv_err_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drv_err_x());
  }

  // uint32 drv_err_y = 9;
  if (this->_internal_drv_err_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drv_err_y());
  }

  // uint32 rotary_state = 10;
  if (this->_internal_rotary_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rotary_state());
  }

  // uint32 err_code = 27;
  if (this->_internal_err_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TtbState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TtbState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TtbState::GetClassData() const { return &_class_data_; }

void TtbState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TtbState *>(to)->MergeFrom(
      static_cast<const TtbState &>(from));
}


void TtbState::MergeFrom(const TtbState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TtbState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_versions().empty()) {
    _internal_set_versions(from._internal_versions());
  }
  if (from._internal_drv_state_x() != 0) {
    _internal_set_drv_state_x(from._internal_drv_state_x());
  }
  if (from._internal_drv_state_y() != 0) {
    _internal_set_drv_state_y(from._internal_drv_state_y());
  }
  if (from._internal_drv_err_x() != 0) {
    _internal_set_drv_err_x(from._internal_drv_err_x());
  }
  if (from._internal_drv_err_y() != 0) {
    _internal_set_drv_err_y(from._internal_drv_err_y());
  }
  if (from._internal_rotary_state() != 0) {
    _internal_set_rotary_state(from._internal_rotary_state());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TtbState::CopyFrom(const TtbState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TtbState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TtbState::IsInitialized() const {
  return true;
}

void TtbState::InternalSwap(TtbState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &versions_, lhs_arena,
      &other->versions_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TtbState, err_code_)
      + sizeof(TtbState::err_code_)
      - PROTOBUF_FIELD_OFFSET(TtbState, drv_state_x_)>(
          reinterpret_cast<char*>(&drv_state_x_),
          reinterpret_cast<char*>(&other->drv_state_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TtbState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ttb_5fcontrol_2eproto_getter, &descriptor_table_ttb_5fcontrol_2eproto_once,
      file_level_metadata_ttb_5fcontrol_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TtbSet*
Arena::CreateMaybeMessage< ::TtbSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TtbSet >(arena);
}
template<> PROTOBUF_NOINLINE ::TtbSetVel*
Arena::CreateMaybeMessage< ::TtbSetVel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TtbSetVel >(arena);
}
template<> PROTOBUF_NOINLINE ::TtbSetPos*
Arena::CreateMaybeMessage< ::TtbSetPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TtbSetPos >(arena);
}
template<> PROTOBUF_NOINLINE ::TtbRe*
Arena::CreateMaybeMessage< ::TtbRe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TtbRe >(arena);
}
template<> PROTOBUF_NOINLINE ::TtbState*
Arena::CreateMaybeMessage< ::TtbState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TtbState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
